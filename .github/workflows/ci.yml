name: CI # Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:

  test:
    name: Test Suite (${{ matrix.os-name }})
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TARGET_I586_UNKNOWN_LINUX_MUSL_RUSTFLAGS: -C target-feature=+sse2

    strategy:
      matrix:
        include:
          - os: macos-latest
            os-name: mac
            features: default
          - os: ubuntu-latest
            os-name: ubuntu
            features: default
          - os: windows-latest
            os-name: windows
            features: default
          - os: ubuntu-latest 
            os-name: android
            target: aarch64-linux-android
            features: termux --no-default-features
          - os: ubuntu-latest 
            os-name: ish
            target: i586-unknown-linux-musl
            features: default 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }} 
      - uses: Swatinem/rust-cache@v2
      - name: Run tests (cross)
        if: ${{ matrix.target != null }}
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: test 
          target: ${{ matrix.target }}
          args: "--features ${{ matrix.features }} --workspace"
          cross-version: 7b79041c9278769eca57fae10c74741f5aa5c14b
      - name: Run tests (default)
        if: ${{ matrix.target == null }}
        run: cargo test --features ${{ matrix.features }} --workspace

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    env:
      CARGO_TARGET_I586_UNKNOWN_LINUX_MUSL_RUSTFLAGS: -C target-feature=+sse2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Check formatting
        run: cargo fmt --all --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      CARGO_TARGET_I586_UNKNOWN_LINUX_MUSL_RUSTFLAGS: -C target-feature=+sse2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Clippy check
        run: cargo clippy --all-targets --all-features --workspace -- -D warnings

  release-commenter:
    name: Commenting on Issues and PRs
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    steps:
      - uses: apexskier/github-release-commenter@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

